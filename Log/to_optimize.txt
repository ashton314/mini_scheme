This file is to record what functions need to be optimized.

Please see Time_trial_log.txt to see what I was doing on the dates
recorded.

Mon Oct 29 17:35:51 MDT 2012
%Time ExclSec CumulS #Calls sec/call Csec/c  Name
 22.5   9.128 16.688 109274   0.0001 0.0002  Cons::array_to_cons
 36.2   14.70 31.161 206392   0.0001 0.0002  main::bind_vars
 21.7   8.805  8.805 133201   0.0001 0.0001  Cons::cons_to_array
 19.0   7.742  7.742 221968   0.0000 0.0000  Cons::cons
 61.1   24.81 24.810 948983   0.0000 0.0000  main::find_var

Tue Oct 30 16:19:21 MDT 2012
%Time ExclSec CumulS #Calls sec/call Csec/c  Name
 2.80   0.257 28.506   2277   0.0001 0.0125  main::scheme_analyze
 39.3   3.611  3.611  43957   0.0001 0.0001  Cons::cons_to_array
 8.55   0.785  1.503  10414   0.0001 0.0001  Cons::array_to_cons
 40.4   3.712  4.892  53563   0.0001 0.0001  main::bind_vars
 10.7   0.985  0.985  25594   0.0000 0.0000  Cons::cons
 62.5   5.747  5.747 215330   0.0000 0.0000  main::find_var
 13.6   1.252  1.252  53563   0.0000 0.0000  main::merge_envs

Intersection: (sorted by personal idea of importance)
- Cons::cons_to_array
- Cons::array_to_cons
- main::bind_vars
- main::find_var
- main::merge_envs

`find_var' and `merge_envs' are already pretty fast. Perhaps I can
optimize away calls to these functions. Particularly `find_var'.

`merge_envs' is about as simple as you can get. Optimizing away calls
is going to be basically the ONLY way I can think of making anything
related to that faster.

I call `cons_to_array' way too much. I should just work with cons
structures.

I think I can optimize much of `cons_to_array' and
`array_to_cons'. Maybe iterate over the array passed to
`array_to_cons' backwards to elimiate massive recursion.

Doing this:
      (map - read-and-run-call-times read-call-times)

      	     	      Read and Run   Read	Run
- Cons::cons_to_array 133201   	     43957	89244
- Cons::array_to_cons 109274	     10414	98860
- main::bind_vars     206392	     53563	152829
- main::find_var      948983	     215330	733653
- main::merge_envs    206392	     53563	152829

Sorting by number of read calls:
- main::find_var      948983	     215330	733653
- main::bind_vars     206392	     53563	152829
- main::merge_envs    206392	     53563	152829
- Cons::cons_to_array 133201   	     43957	89244
- Cons::array_to_cons 109274	     10414	98860

Sorting by number of run calls:
- main::find_var      948983	     215330	733653
- main::bind_vars     206392	     53563	152829
- main::merge_envs    206392	     53563	152829
- Cons::array_to_cons 109274	     10414	98860
- Cons::cons_to_array 133201   	     43957	89244


Fri Nov  9 20:57:26 MST 2012

Improvements from lexical addressing ops: (with the profiler running)

Closures:    16.6546	  %14.95  
Loops:	     31.0374	  %14.96

Major gain.

After writing lexical addressing, these are the routines that I think
I need to spend the most time on:

%Time ExclSec CumulS #Calls sec/call Csec/c  Name
 14.2   8.989 17.255 110272   0.0001 0.0002  Cons::array_to_cons
 28.3   17.91 34.859 248127   0.0001 0.0001  main::bind_vars
 10.3   6.562  6.562  91477   0.0001 0.0001  Cons::cons_to_array
 7.63   4.832  6.362  67382   0.0001 0.0001  Cons::mapcar
 13.6   8.620  8.620 226309   0.0000 0.0000  Cons::cons
 2.18   1.379  1.379  48476   0.0000 0.0000  main::set_var
 9.42   5.961  5.961 248127   0.0000 0.0000  main::merge_envs
 0.38   0.243  3.998  10740   0.0000 0.0004  Cons::null
 0.11   0.067  0.067   1165   0.0001 0.0001  main::looks_like_number
 7.61   4.815  4.815 216972   0.0000 0.0000  main::find_var
 1.59   1.009  1.641  51641   0.0000 0.0000  Reader::__ANON__
 0.78   0.492  1.641   3287   0.0001 0.0005  Reader::scheme_read
 0.23   0.145  1.577    637   0.0002 0.0025  Reader::scheme_read_delimited_list


Thoughts:
- I might be able to optimize set_var() by using a similar technique
  to find_var(). Hhmmm... Have find_var() take an optional third
  argument of what to set the variable to? This would require a bit of
  modification of the compiled lookup, but it shouldn't be too hard.
- Why is bind_vars taking so long?
- Can I improve the reader's speed?
  - Do I need to improve the reader's speed?
- If I optimize the code produced by the BACKQUOTE macro by running a
  simplification program (as outlined in the CL spec) I might be able
  to derive a major performance gain.
  - The BACKQUOTE expansion is not what is taking so long. The longest
    part of backquotes is the execution of the resulting code, I
    think.
  - I printed out something every time the BACKQUOTE macro was
    called. It was called only at read time, which is exactly what is
    supposed to happen. However, the code generated by BACKQUOTE was
    called multiple times. This is necessary, (or is it?) but slow.
