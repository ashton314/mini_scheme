(define *bq-simplify* #f)

(define-syntax (backquote x)
  (bq-completely-process x))

(define (bq-completely-process x)
  (let ((raw-result (bq-process x)))
    (bq-remove-tokens (if *bq-simplify*
			  (bq-simplify raw-result)
			  raw-result))))

(define (bq-process x)
  (cond ((atom x)
	 (list 'bq-quote x))
	((eq? (car x) 'backquote)
	 (bq-process (bq-completely-process (cadr x))))
	((eq? (car x) 'comma) (cadr x))
	((eq? (car x) 'comma-splice)
	 (write-err ",@ after `")
	 (terpri))
	(#t (do ((p x (cdr p))
		 (q nil (cons (bracket (car p)) q)))
		((atom p)
		 (cons 'bq-append
		       (cons (reverse q) (list (list 'bq-quote p)))))
	      (cond ((eq? (car p) 'comma)
		     (unless (null (cddr p)) (write-err "Malformed ,"))
		     (cons 'bq-append
			   (cons (reverse q) (list (cadr p)))))
		    ((eq? (car p) 'comma-splice)
		     (write-err "Malformed ,@")))))))

(define (bracket x)
  (cond ((atom x)
	 (list 'bq-list (bq-process x)))
	((eq? (car x) 'comma)
	 (list 'bq-list (cadr x)))
	((eq? (car x) 'comma-splice)
	 (cadr x))
	(#t (list 'bq-list (bq-process x)))))

(define (bq-remove-tokens x)
  (cond ((eq? x 'bq-list) 'list)
	((eq? x 'bq-append) 'append)
	((eq? x 'bq-nconc) 'nconc)
	((eq? x 'bq-list) 'list)
	((eq? x 'bq-quote) 'quote)
	((atom x) x)
	((eq? (car x) 'bq-clobberable)
	 (bq-remove-tokens (cadr x)))
	((and (eq? (car x) 'bq-list)
	      (list? (cddr x))
	      (null (cdr (cddr x))))
	 (cons 'cons (maptree bq-remove-tokens (cdr x))))
	(#t (maptree bq-remove-tokens x))))

(define (maptree fn x)
  (if (atom x)
      (fn x)
      (let ((a (fn (car x)))
	    (d (maptree fn (cdr x))))
	(if (and (eq? a (car x)) (eq? d (cdr x)))
	    x
	    (cons a d)))))
