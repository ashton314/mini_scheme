Enviroments could be structured like so:

my $env = {
	   symbol1 => 'val1',
	   symbol2 => 'val2',
	   symbol3 => 'val3',
	   '..'    => {		# This MUST be a ref to the actual parent enviroment
		       symbol2 => 'val2.1',
		       symbol4 => 'val4',
		       '..'    => {}, # etc.
		      },
	  };

If a symbol's value is not found in the current enviroment, the parent
enviroment is searched for the variable.

We might be able to a bit of look up at compile time if we KNOW that
the symbol is not defined in the inner enviroment: if the outer
enviroment is dereferancable during compile time, we can do some
lookup then.

See the note on page 487 in SICP. The outline described here is known
as "deep binding." "Lexical addressing" is supposed to be more
efficient.

We need to find some way to represent these enviroments so we do not
get a clash with the symbol '..'. My solution: more nesting of hashes!!
